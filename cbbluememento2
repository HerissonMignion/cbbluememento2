#!/bin/bash



# toutes les "moment de la journée" sont en minutes depuis minuit le
# matin.


start_time=0; # heure de début de la journée.


# ici on garde les "zone" de la journée. il faut garder le nom de la
# zone et l'heure de la fin. naturellement, les listes doivent donc
# toujours avoit la même quantité d'éléments.
list_zones=();
list_end_times=();






help() {
	cat <<HELP;
SYNOPSIS

	$(basename "$0") <commande> [<option>]...

DESCRIPTION

	Programme cossin pour calculer mes heures.

	Permet que je lui donne mes différentes "zones" de tâche de la
	journée, et additionne toutes les zones de même nom ensemble et
	affiche le total des heures que j'y ai passé.  Possède aussi une
	calculatrice qui prend une équation exprimée en reverse polish
	notation.

COMMANDES

	group <option>...

		Passe à travers toutes les zones spécifiées par les options,
		additionne les zones de même nom (additionne tout les
		"meeting" entre eux, et tout les "work" entre eux, etc) et
		affiche la somme de chaque zone.

		L'utilisation des options -s et -z pour former l'horaire de la
		journée est très important.  On crée l'horaire en utilisant -s
		pour indiquer l'heure du début de la journée, ensuite on
		ajoute, du matin jusqu'au soir, une zone de travail avec -z,
		le nom de la zome (ex: work, dev, scrum, meeting, diner, etc)
		et de l'heure de fin de cette zone.

		EX:

		$(basename "$0") group -s 8:30 -z dev 9:15 \\
			-z scrum 9:30 -z dev 12:00 -z diner 13:00 \\
			-z dev 17:00

	calc -- <équation en polish notation sur plusieurs arguments>...

		Calcule une équation écrite en *reverse polish notation*, avec
		support pour les heures.  Les objets qui composent l'équation
		doivent êtres passés dans des arguments différents.  C'est
		préférable d'utiliser -- pour faire arrêter la lecture des
		options parce que sinon il va être difficile d'effectuer des
		soustractions.  Calc supporte les 4 opérations de bases +, -,
		* et /.  Vous pourriez avoir à échapper l'étoile pour ne pas
		déclancher le filename expansion, en écrivant soit \\* ou "*".
		Calc supporte que les entiers positif ou négatif, qui sont
		considérés comme des minutes, ainsi que des <durée>.  Utiliser
		l'option --reverse pour inverser le sens de la lecture.

		EX:

		cbbluememento2 calc -- 7:30 5 \\* 0:30 5 \\* +

OPTIONS

	-s <moment>, --start <moment>

		Sert à indiquer le début de la journée.

	-z <nom> <moment>, --zone <nom> <moment>

		Sert à ajouter une zone de temps à l'horaire.  Les arguments
		du script sont lus de gauche à droite, et les zones de temps
		sont ajoutés à la fin de l'horaire, alors il faut indiquer les
		zones de temps du matin jusqu'au soir.

	--reverse

		Pour la commande calc, inverse le sens de la lecture de
		l'équation (il va lire de droite à gauche.)

FORMAT

	<moment> = h:mm, hh:mm

		Exprimme une heure de la journée.

	<durée> = h:mm, -h:mm, hh:mm, -hh:mm

		Exprime une quantité de temps d'une façon convéniente.  À
		l'interne, tout les calculs sont effectués en minutes, mais
		les résultats ou les entrés sont exprimmés dans ce format pour
		qu'ils soient plus facile à saisir/comprendre.  Puisque c'est
		juste une quantité de temps (au lieu d'être un moment de la
		journée), alors ça peut être négatif.

HELP
}


quit_because() {
	local code=$1;
	shift;
    >&2 echo "$@";
	exit "$code";
}



# make sure que c'est le format hh:mm. quantité négative (commencerait
# avec un -) n'est pas accepté.
test_human_time() {
	local str=$1;
    [[ $str =~ ^[0-9]+:[0-5][0-9]$ ]];
}



# convertie une durée de temps ou un "momtent" (temps) humain (hh:mm) en minutes.
# accepte les temps négatif comme "-1:01" qui vaut -61 minutes.
convert_human_time_to_int() {
	local str=$1;
	if ! [[ $str =~ ^(-?)([0-9]+):([0-9][0-9])$ ]]; then
		return 1;
	fi;
	local sign=${BASH_REMATCH[1]};
	local hours=${BASH_REMATCH[2]};
	local minutes=${BASH_REMATCH[3]};
	local result=$(( 10#$hours * 60 + 10#$minutes ));
	if [ "$result" == "0" ]; then
		echo 0;
	else
		echo "$sign$result";
	fi;
}


# convertie des minutes en notation humaine (hh:mm).
convert_int_to_human_time() {
    local str=$1;
	if ! [[ $str =~ ^(-?)([0-9]+)$ ]]; then
		return 1;
	fi;
	local sign=${BASH_REMATCH[1]};
	local minutes=${BASH_REMATCH[2]};
	# retire les leading 0 en évaluant le nombre en base 10.
	minutes=$((10#$minutes));
	if ((minutes == 0)); then
		echo "0:00";
		return 0;
	fi;
	local hours=$((minutes / 60));
	((minutes %= 60));
	if ((minutes < 10)); then
		minutes=0$minutes;
	fi;
	echo "$sign$hours:$minutes";
}


# calcule la durée d'une zone selon son index dans la table
get_zone_duration() {
	local index=$1;
	local start=$start_time;
	local end=${list_end_times[index]};
	if ((index > 0)); then
		start=${list_end_times[index - 1]};
	fi;
	echo "$((end - start))";
}




opt_reverse=0;




# first pass to separate combined options (-asdf becomes -a -s -d -f)
trailing_args=();
while (($#)); do
	arg=$1;
	shift;
	case "$arg" in
		(--?*)
			trailing_args+=("$arg");
			;;
		(--)
			trailing_args+=(--);
			break;
			;;
		(-*)
			for letter in $(echo "${arg#-}" | grep -o .); do
				trailing_args+=("-$letter");
			done;
			;;
		(*)
			trailing_args+=("$arg");
			;;
	esac;
done;
set -- "${trailing_args[@]}" "$@";

trailing_args=();
while (($#)); do
	arg=$1;
	shift;
	case "$arg" in
		(-h|--help)
			help;
			exit 0;
			;;
		(-s|--start)
			if ! test_human_time "$1"; then
				quit_because 1 "$1 n'est pas une heure valide";
			fi;
			start_time=$(convert_human_time_to_int "$1");
			shift;
			;;
		(-z|--zone)
			# TODO: make sure que nom de la zone n'est pas trop retarded?

			if ! test_human_time "$2"; then
				quit_because 1 "$2 n'est pas une heure valide";
			fi;
			list_zones+=("$1");
			list_end_times+=("$(convert_human_time_to_int "$2")");
			shift 2;
			;;
		(--reverse)
			opt_reverse=1;
			;;
		(--)
			break;
			;;
		(-*)
			>&2 echo "Unknown option: $arg";
			exit 1;
			;;
		(*)
			trailing_args+=("$arg");
			;;
	esac;
done;
set -- "${trailing_args[@]}" "$@";
unset arg letter;






commands=(
	help
	group
	calc
	test
);

command_help() {
	help;
}

command_group() {
    print_time_table;

	# on récupère chaque zone rien qu'une seule fois.
	local uniq_zones=();
	local zone;
	for zone in "${list_zones[@]}"; do
		(
			for uzone in "${uniq_zones[@]}"; do
				[ "$uzone" == "$zone" ] && exit 0;
			done;
			exit 1;
		) && continue;
		uniq_zones+=("$zone");
	done;

	local i;
	local current_sum;
	for zone in "${uniq_zones[@]}"; do
		current_sum=0;
		# on accumule toutes les zones de ce nom dans current_sum
		for ((i = 0; i < ${#list_zones[@]}; i++)); do
			if [ "${list_zones[i]}" == "$zone" ]; then
				((current_sum += $(get_zone_duration "$i")));
			fi;
		done;

		echo "$zone:"$'\t'" $(convert_int_to_human_time "$current_sum")";
	done;
	
}





# return 0 si c'est un nombre positif ou négatif, 1 si ce n'est pas un
# nombre
test_numeric() {
	local str=$1;
	[[ $str =~ ^-?[0-9]+$ ]];
}

# retire les leading 0
format_numeric() {
	local str=$1;
	if ! [[ $str =~ ^(-?)([0-9]+)$ ]]; then
		return 1;
	fi;
	local sign=${BASH_REMATCH[1]};
	local digits=${BASH_REMATCH[2]};
	# évaluer le nombre en base 10 va retirer les leading 0
	((digits = 10#$digits));
	if ((digits == 0)); then
		echo 0;
		return 0;
	fi;
	echo "$sign$digits";
}


reverse_list_to_ptr() {
	local -n ptr=$1;
	shift;
	# le restant des arguments est le contenu de la liste qu'il faut
	# inverser à l'intérieur de la variable qu'on a reçu en premier
	# argument.

	ptr=();
	while (($#)); do
		ptr=("$1" "${ptr[@]}");
		shift;
	done;
}


# pop_last_of_ptr() {
# 	local -n ptr=$1;

# 	set -- "${ptr[@]}";
# 	ptr=();
# 	while (($# > 1)); do
# 		ptr+=("$1");
# 		shift;
# 	done;
# }

pop_first_of_ptr() {
	local -n ptr=$1;
	local count=${2:-1};

	set -- "${ptr[@]}";
	shift "$count";
	ptr=("$@");
}

push_to_ptr() {
	local -n ptr=$1;
	local value=$2;

	ptr=("$value" "${ptr[@]}");
}



test_is_operation() {
	local op=$1;
	[ "$op" == "+" ] || [ "$op" == "-" ] || [ "$op" == "*" ] || [ "$op" == "/" ];
}

compute_equation() {
	# y'a moins de ligne, et moins de boucle, à écrire en faisant que
	# la surface (ou fin) du stack est au début de la liste au lieu
	# d'être la fin de la liste.
	local stack=();

	local current;
	local a;
	local b;
	while (($#)); do
		current=$1;
		shift;
		if test_numeric "$current"; then
			push_to_ptr stack "$(format_numeric "$current")";
		elif convert_human_time_to_int "$current" > /dev/null; then
			push_to_ptr stack "$(convert_human_time_to_int "$current")";
		elif test_is_operation "$current"; then
			if ((${#stack[@]} < 2)); then
				quit_because 1 "Not enough values provided.";
			fi;
			a=${stack[1]};
			b=${stack[0]};
			if [ "$op" == "/" ] && [ "$b" == "0" ]; then
				quit_because 1 "Division by 0";
			fi;

			pop_first_of_ptr stack 2;
			# push_to_ptr stack "$((a $current b))";
			push_to_ptr stack "$((a $current b))";
		else
			quit_because 1 "This is not a valid token: $current";
		fi;
	done;

	if ((${#stack[@]} > 1)); then
		quit_because 1 "Not enough operators given to operate on all the values.";
	fi;

	echo "${stack[0]}";
}


command_calc() {
	local equ=("$@");
	if ((opt_reverse)); then
		reverse_list_to_ptr equ "$@";
	fi;

	# on fait calculer l'équation une premier fois pour tester si y'a
	# des problème. la fonction va faire exit le script si y'a un
	# problème, et imprimmer un message dans stderr.
    compute_equation "${equ[@]}" > /dev/null;

	local result=$(compute_equation "${equ[@]}");
	echo "$result minutes";
	convert_int_to_human_time "$result";
	
}



command_test() {
	"$@";
}

print_time_table() {
	echo "-----[ horaire ]-----";
	
	convert_int_to_human_time "$start_time";
	local i;
	local previous_end_time=$start_time;
	for ((i = 0; i < ${#list_zones[@]}; i++)); do
		echo $'\t'"(#$i) ${list_zones[i]} ($(convert_int_to_human_time "$(get_zone_duration "$i")"))";
		convert_int_to_human_time "${list_end_times[i]}";
		
		previous_end_time=${list_end_times[i]};
	done;
	echo "---------------------";
}



main() {
	if (($# < 1)); then
		>&2 echo "No command provided. See --help";
		exit 1;
	fi;
	
	local command=$1;
	shift;
	local candidate;
	for candidate in "${commands[@]}"; do
		if [ "$candidate" == "$command" ]; then
			"command_$command" "$@";
			return $?;
		fi;
	done;

	>&2 echo "Unknown command: $command";
	return 1;
}



main "$@";





